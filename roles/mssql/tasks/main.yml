---         
# Install MSSQL repo and key 
- name: Import MS GPG Key
  apt_key:
    url: https://packages.microsoft.com/keys/microsoft.asc
    state: present

- name: Register MSSQL Server repo
  get_url:
    url: "{{ ubuntu_server_repo_url }}"
    dest: /etc/apt/sources.list.d/mssql-server.list

- name: Register MSSQL Tool repo
  get_url:
    url: "{{ ubuntu_tools_repo_url }}"
    dest: /etc/apt/sources.list.d/mssql-tools.list

- name: Refresh apt-get cache for MSSQL repos
  apt:
    update_cache: yes

# Intall MSSQL
- name: Install MSSQL
  apt:
    name: mssql-server
    state: latest

- name: Run MSSQL Server Setup
  shell: MSSQL_PID="{{ mssql_pid }}" MSSQL_SA_PASSWORD="{{ mssql_sa_password }}" /opt/mssql/bin/mssql-conf -n setup accept-eula
  register: setup_output
  failed_when:  "'Setup has completed successfully. SQL Server is now starting.' not in setup_output.stdout"

- name: open SQL endpoint in firewall
  ufw:
    port: "{{ mssql_port }}"
    proto: tcp
    rule: allow

# Install MSSQL-tools
- name: Install MSSQL tools package
  apt:
    name: mssql-tools
    state: latest
  environment:
    ACCEPT_EULA: 'y'

# Install odbc package for local connection
- name: Install UNIXODBC package
  apt:
    name: unixodbc-dev
    state: latest

# Start MSSQL service
- name: Start MSSQL
  service:
    name: mssql-server
    state: started

- name: Install pymssql for playbooks against DB Server
  pip:
    name: pymssql
    state: latest

# Create LabKey DB
- name: Create MSSQL DB for LabKey
  mssql_db:
    login_host: "{{ mssql_server }}"
    login_user: "{{ jdbcUser }}"
    login_password: "{{ jdbcPass }}"
    login_port: "{{ mssql_port }}"
    name: "{{ mssql_db_name }}"
    state: present

# Check for reboot and reboot if necessary
- name: Check if reboot is required
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Rebooting machine
  shell: sleep 2 && shutdown -r now
  async: 1
  poll: 0
  ignore_errors: true
  when: reboot_required_file.stat.exists

- name: Wait for reboot
  local_action: wait_for host={{ ansible_ssh_host }} state=started port=22 delay=30
  become: false
  when: reboot_required_file.stat.exists


